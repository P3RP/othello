{"version":3,"sources":["Components/Reset.js","utils/othello.js","store/modules/board.js","Containers/ResetContainer.js","Components/Exit.js","store/modules/game.js","store/modules/index.js","store/index.js","utils/socket.js","Containers/ExitContainer.js","Components/Modal.js","Containers/ModalContainer.js","Components/Pass.js","Containers/PassContainer.js","Components/Undo.js","Containers/UndoContainer.js","Components/Score.js","Containers/ScoreContainer.js","Components/Block.js","Containers/BlockContainer.js","Components/Board.js","Containers/BoardContainer.js","Components/History.js","Containers/HistoryContainer.js","Containers/RoomContainer.js","Containers/GameContainer.js","App.js","index.js"],"names":["Reset","props","onClick","onReset","className","updateBoard","board","row","col","player","new_board","map","v","slice","getBlockReverse","forEach","element","i","j","prepareNextBoard","pass","isEnd","next_player","new_pass","clickable_block","getClickAvailable","length","isBoardFullOne","UP","DOWN","LEFT","RIGHT","LEFTUP","LEFTDOWN","RIGHTUP","RIGHTDOWN","checkDirectionReverse","info","direction","m_row","m_col","result","block_state","push","apply","count","HEIGHT","b","w","e","empty","check","Set","add","getHistory","state","action","undo","String","fromCharCode","PLAY","PASS","UNDO","END","RESET","CREATE","JOIN","OPPONENT","EXIT","OPPONENTEXIT","play","type","initialPresent","canPass","initialMulti","user","name","opponent","room","initialState","history","present","multi","mapDispatchToProps","reset","connect","Exit","onExit","SELECT","game","rootReducer","combineReducers","gameState","boardState","new_history","new_count","console","log","shift","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","socket","socketIOClient","on","data","dispatch","joinMulti","roomId","msg","exit","emit","Modal","winner","Pass","onPass","Undo","Score","classBlack","classWhite","end","Block","value","turn","OnClick","Board","onPlay","trIdx","tdIdx","colHeader","trs","History","histories","id","userName","onChange","target","select","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0c6a46a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Reset(props) {\n  return (\n    <div onClick={props.onReset} className=\"reset-btn\">\n      Reset\n    </div>\n  );\n}\n\nexport default Reset;\n","// 보드 설정\nexport const HEIGHT = 8;\nexport const WIDTH = 8;\n\n// ----------------------------------------------------------------------------------\n// 진행\n// ----------------------------------------------------------------------------------\n\n// 보드 업데이트\nexport const updateBoard = (board, row, col, player) => {\n  // 새로운 상태의 보드 생성\n  const new_board = board.map((v) => v.slice());\n\n  // 선택한 위치로 인해 뒤집어지는 타일 변경\n  getBlockReverse(new_board, {\n    row: row,\n    col: col,\n    player: player,\n  }).forEach((element) => {\n    new_board[element[0]][element[1]] = player;\n  });\n\n  // 선택한 위치 타일 변경\n  new_board[row][col] = player;\n\n  // 기존 선택 가능 블록 제거\n  for (let i = 0; i < HEIGHT; i++) {\n    for (let j = 0; j < WIDTH; j++) {\n      if (new_board[i][j] === 2) {\n        new_board[i][j] = -1;\n      }\n    }\n  }\n\n  return new_board;\n};\n\n// 다음 차례를 위해 보드 설정\nexport const prepareNextBoard = (board, player, pass) => {\n  // 플레이어 변경\n  const next_player = player ^ 1;\n\n  // 선택 가능 블록 생성\n  const new_pass = [...pass];\n  const clickable_block = getClickAvailable(board, next_player);\n  if (!clickable_block.length) {\n    // 다음 사용자 Pass 허용\n    new_pass[next_player] = true;\n  } else {\n    new_pass[next_player] = false;\n    clickable_block.forEach((element) => {\n      board[element[0]][element[1]] = 2;\n    });\n  }\n\n  // 게임 종료 여부 확인\n  let isEnd;\n  if ((new_pass[0] && new_pass[1]) || isBoardFullOne(board)) {\n    isEnd = true;\n  } else {\n    isEnd = false;\n  }\n\n  return [board, next_player, new_pass, isEnd];\n};\n\n// ----------------------------------------------------------------------------------\n// 진행 조건\n// ----------------------------------------------------------------------------------\n\n// 방향\nconst UP = { row: -1, col: 0 };\nconst DOWN = { row: 1, col: 0 };\nconst LEFT = { row: 0, col: -1 };\nconst RIGHT = { row: 0, col: 1 };\nconst LEFTUP = { row: -1, col: -1 };\nconst LEFTDOWN = { row: 1, col: -1 };\nconst RIGHTUP = { row: -1, col: 1 };\nconst RIGHTDOWN = { row: 1, col: 1 };\n\n// 한 방향으로 뒤집을 수 있는 목록\nconst checkDirectionReverse = (board, info, direction) => {\n  let row = info[\"row\"];\n  let col = info[\"col\"];\n  const player = info[\"player\"];\n\n  const m_row = direction[\"row\"];\n  const m_col = direction[\"col\"];\n\n  const result = [];\n\n  while (true) {\n    // 방향으로 이동\n    row = row + m_row;\n    if (row >= HEIGHT || row < 0) {\n      return [];\n    }\n    col = col + m_col;\n    if (col >= WIDTH || col < 0) {\n      return [];\n    }\n\n    // Board에서 현재 위치에 칩이 있는지\n    // 칩이 있다면 무슨 색인지 확인\n    const block_state = board[row][col];\n    if (block_state === player) {\n      return result;\n    } else if (block_state === -1 || block_state === 2) {\n      return [];\n    } else {\n      result.push([row, col]);\n    }\n  }\n};\n\n// 블록의 뒤집을 수 있는 위치 계산\nexport const getBlockReverse = (board, info) => {\n  let result = [];\n\n  // 각 방향에 대해서 뒤집을 수 있는 수 확인\n  result.push.apply(result, checkDirectionReverse(board, info, UP));\n  result.push.apply(result, checkDirectionReverse(board, info, DOWN));\n  result.push.apply(result, checkDirectionReverse(board, info, LEFT));\n  result.push.apply(result, checkDirectionReverse(board, info, RIGHT));\n  result.push.apply(result, checkDirectionReverse(board, info, LEFTUP));\n  result.push.apply(result, checkDirectionReverse(board, info, LEFTDOWN));\n  result.push.apply(result, checkDirectionReverse(board, info, RIGHTUP));\n  result.push.apply(result, checkDirectionReverse(board, info, RIGHTDOWN));\n\n  return result;\n};\n\n// 플레이어가 놓을 수 있는 위치 조회\nexport const getClickAvailable = (board, player) => {\n  const result = [];\n\n  for (let row = 0; row < HEIGHT; row++) {\n    for (let col = 0; col < WIDTH; col++) {\n      // 이미 채워진 칸이면 계산 없이 패스\n      if (board[row][col] !== -1) {\n        continue;\n      }\n      if (\n        getBlockReverse(board, { row: row, col: col, player: player }).length\n      ) {\n        result.push([row, col]);\n      }\n    }\n  }\n  return result;\n};\n\nexport const count = (board) => {\n  const result = [0, 0, HEIGHT * WIDTH];\n  board.forEach((row) =>\n    row.forEach((element) => {\n      if (element === 0 || element === 1) {\n        result[element] += 1;\n      }\n    })\n  );\n  result[2] -= result[0];\n  result[2] -= result[1];\n  return {\n    b: result[0],\n    w: result[1],\n    e: result[2],\n  };\n};\n\n// ----------------------------------------------------------------------------------\n// 종료 조건\n// ----------------------------------------------------------------------------------\n\n// 모든 칸이 사용되거나 전체 칩이 한 종류인 경우\nconst isBoardFullOne = (board) => {\n  let empty = HEIGHT * WIDTH;\n  const check = new Set();\n\n  board.forEach((row) =>\n    row.forEach((element) => {\n      if (element === 0 || element === 1) {\n        // 빈칸 개수 세기\n        empty -= 1;\n\n        // 칩 종류 확인\n        check.add(element);\n      }\n    })\n  );\n\n  return !empty || check.length === 1 ? true : false;\n};\n\n// ----------------------------------------------------------------------------------\n// History 기록\n// ----------------------------------------------------------------------------------\n\nconst getLocation = (row, col) => {\n  return String.fromCharCode(65 + col) + (row + 1);\n};\n\nexport const getHistory = (state, action) => {\n  if (\"pass\" in action) {\n    return {\n      player: state.player,\n      action: \"Pass\",\n      undo: state,\n    };\n  }\n  return {\n    player: state.player,\n    action: getLocation(action.row, action.col),\n    undo: state,\n  };\n};\n","import {\n  updateBoard,\n  prepareNextBoard,\n  getHistory,\n  count,\n} from \"../../utils/othello\";\n\n// 액션 타입 정의 (일반)\nconst PLAY = \"board/PLAY\";\nconst PASS = \"board/PASS\";\nconst UNDO = \"board/UNDO\";\nconst END = \"board/END\";\nconst RESET = \"board/RESET\";\n\n// 액션 타입 정의 (멀티)\nconst CREATE = \"multi/CREATE\";\nconst JOIN = \"multi/JOIN\";\nconst OPPONENT = \"multi/OPPONENT\";\nconst PLAYMULTI = \"multi/PLAY\";\nconst EXIT = \"multi/EXIT\";\nconst OPPONENTEXIT = \"multi/OPPONENTEXIT\";\n\n// 액션 생성 함수 정의 (일반)\nexport const play = (row, col, player) => ({\n  type: PLAY,\n  row,\n  col,\n  player,\n});\nexport const pass = (player) => ({ type: PASS, player });\nexport const undo = () => ({ type: UNDO });\nexport const end = () => ({ type: END });\nexport const reset = () => ({ type: RESET });\n\n// 액션 생성 함수 정의 (멀티)\nexport const createMulti = (player, room) => ({\n  type: CREATE,\n  player,\n  room,\n});\nexport const joinMulti = (player, opponent, room) => ({\n  type: JOIN,\n  player,\n  opponent,\n  room,\n});\nexport const opponent = (opponent) => ({ type: OPPONENT, opponent });\nexport const playmulti = () => ({ type: PLAYMULTI });\nexport const exit = () => ({ type: EXIT });\nexport const opponentExit = () => ({ type: OPPONENTEXIT });\n\n// 초기 상태 정의\nconst initialPresent = {\n  board: [\n    [-1, -1, -1, -1, -1, -1, -1, -1],\n    [-1, -1, -1, -1, -1, -1, -1, -1],\n    [-1, -1, -1, -1, 2, -1, -1, -1],\n    [-1, -1, -1, 0, 1, 2, -1, -1],\n    [-1, -1, 2, 1, 0, -1, -1, -1],\n    [-1, -1, -1, 2, -1, -1, -1, -1],\n    [-1, -1, -1, -1, -1, -1, -1, -1],\n    [-1, -1, -1, -1, -1, -1, -1, -1],\n  ],\n  player: 0,\n  count: {\n    b: 2,\n    w: 2,\n    e: 60,\n  },\n  canPass: [false, false],\n  isEnd: false,\n};\n\nconst initialMulti = {\n  user: -1,\n  name: \"\",\n  opponent: \"\",\n  room: \"\",\n};\n\nconst initialState = {\n  history: [],\n  present: initialPresent,\n  multi: initialMulti,\n};\n\n// 리듀서 정의\nexport const boardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PLAY: {\n      // 선택한 칸에 대해서 보드 업데이트\n      const new_board = updateBoard(\n        state.present.board,\n        action.row,\n        action.col,\n        action.player\n      );\n\n      // 다음 차례를 위한 보드 준비\n      const [board, next_player, new_pass, isEnd] = prepareNextBoard(\n        new_board,\n        action.player,\n        state.present.canPass\n      );\n\n      // History 작성\n      const new_history = getHistory(state.present, {\n        row: action.row,\n        col: action.col,\n      });\n\n      // Count 측정\n      const new_count = count(board);\n\n      return {\n        ...state,\n        history: [new_history, ...state.history],\n        present: {\n          board: board,\n          player: next_player,\n          count: new_count,\n          canPass: new_pass,\n          isEnd: isEnd,\n        },\n      };\n    }\n\n    case PASS: {\n      console.log((action.player === 1 ? \"Black\" : \"White\") + \" pass!!\");\n\n      // 새로운 상태의 보드 생성\n      const new_board = state.present.board.map((v) => v.slice());\n\n      // 다음 차례를 위한 보드 준비\n      const [board, next_player, new_pass, isEnd] = prepareNextBoard(\n        new_board,\n        action.player,\n        state.present.canPass\n      );\n\n      // History 작성\n      const new_history = getHistory(state.present, {\n        pass: \"pass\",\n      });\n\n      return {\n        ...state,\n        history: [new_history, ...state.history],\n        present: {\n          ...state.present,\n          board: board,\n          player: next_player,\n          canPass: new_pass,\n          isEnd: isEnd,\n        },\n      };\n    }\n\n    case UNDO: {\n      console.log(\"undo\");\n\n      const new_history = state.history.slice();\n      const undo = new_history.shift();\n\n      return {\n        ...state,\n        history: new_history,\n        present: undo.undo,\n      };\n    }\n\n    case END: {\n      console.log(\"end\");\n\n      return {\n        ...state,\n        present: {\n          ...state.present,\n          isEnd: true,\n        },\n      };\n    }\n\n    case RESET: {\n      console.log(\"reset\");\n\n      return {\n        ...state,\n        history: [],\n        present: initialPresent,\n      };\n    }\n\n    case CREATE: {\n      return {\n        ...state,\n        multi: {\n          ...state.multi,\n          user: action.player.player,\n          name: action.player.name,\n          room: action.room,\n        },\n      };\n    }\n\n    case JOIN: {\n      return {\n        ...state,\n        multi: {\n          ...state.multi,\n          user: action.player.player,\n          name: action.player.name,\n          room: action.room,\n          opponent: action.opponent,\n        },\n      };\n    }\n\n    case OPPONENT: {\n      return {\n        ...state,\n        multi: {\n          ...state.multi,\n          opponent: action.opponent,\n        },\n      };\n    }\n\n    case EXIT: {\n      return {\n        history: [],\n        present: initialPresent,\n        multi: initialMulti,\n      };\n    }\n\n    case OPPONENTEXIT: {\n      return {\n        history: [],\n        present: initialPresent,\n        multi: {\n          ...state.multi,\n          user: 0,\n          opponent: \"\",\n        },\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Reset from \"../Components/Reset\";\nimport { reset } from \"../store/modules/board\";\n\nfunction ResetContainer(props) {\n  return <Reset onReset={() => props.reset()} />;\n}\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = {\n  reset,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetContainer);\n","import React from \"react\";\n\nfunction Exit(props) {\n  return (\n    <div onClick={props.onExit} className=\"pass-btn\">\n      Exit\n    </div>\n  );\n}\n\nexport default Exit;\n","// 액션 타입 정의\nconst SELECT = \"game/SELECT\";\n\n// 액션 생성 함수 정의\nexport const select = (game) => ({ type: SELECT, game });\n\n// 초기 상태 정의\nconst initialState = {\n  game: -1,\n};\n\n// 리듀서 정의\nexport const gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT: {\n      return {\n        game: action.game,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { gameReducer } from \"./game\";\nimport { boardReducer } from \"./board\";\n\nconst rootReducer = combineReducers({\n  gameState: gameReducer,\n  boardState: boardReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./modules\";\n\nconst devTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\nconst store = createStore(rootReducer, devTools);\nexport default store;\n","import socketIOClient from \"socket.io-client\";\n\nimport store from \"../store\";\nimport {\n  createMulti,\n  joinMulti,\n  opponent,\n  play,\n  pass,\n  opponentExit,\n} from \"../store/modules/board\";\n\nconst ENDPOINT = \"http://15.165.120.63:3001\";\n\n// Socket 연결\nconst socket = socketIOClient(ENDPOINT);\n\n// 방 생성 완료 시 작동\nsocket.on(\"create\", (data) => {\n  console.log(\"create : \" + data);\n  store.dispatch(createMulti({ player: 0, name: data.name }, data.room));\n});\n\n// 방 입장 완료 시 작동\nsocket.on(\"join\", (data) => {\n  console.log(\"join : \" + data);\n  store.dispatch(\n    joinMulti({ player: 1, name: data.name }, data.opponent, data.roomId)\n  );\n});\n\n// 새로운 사용자 방 입장\nsocket.on(\"newPlayer\", (data) => {\n  store.dispatch(opponent(data));\n});\n\n// 오류 발생 시 메시지 전달 받음\nsocket.on(\"eMsg\", (msg) => {\n  console.log(msg);\n});\n\n// (멀티) 상대편의 Play 응답 받은 경우\nsocket.on(\"play\", (data) => {\n  if (data.action.type === \"click\") {\n    store.dispatch(play(data.action.row, data.action.col, data.player));\n    console.log(\"opponent play\");\n  } else if (data.action.type === \"pass\") {\n    store.dispatch(pass(data.player));\n    console.log(\"opponent pass\");\n  } else {\n    return;\n  }\n});\n\n// (멀티) 상대방 탈주!\nsocket.on(\"opponentExit\", () => {\n  store.dispatch(opponentExit());\n});\n\nexport default socket;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Exit from \"../Components/Exit\";\nimport { exit } from \"../store/modules/board\";\nimport socket from \"../utils/socket\";\n\nfunction ExitContainer(props) {\n  const onExit = () => {\n    props.exit();\n\n    socket.emit(\"exit\", {\n      room: props.room,\n      player: props.user,\n    });\n  };\n\n  return <Exit onExit={() => onExit()} />;\n}\n\nconst mapStateToProps = (state) => ({\n  room: state.boardState.multi.room,\n  user: state.boardState.multi.user,\n});\n\nconst mapDispatchToProps = {\n  exit,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExitContainer);\n","import React from \"react\";\n\nimport ResetContainer from \"../Containers/ResetContainer\";\nimport ExitContainer from \"../Containers/ExitContainer\";\n\nfunction Modal(props) {\n  const win = () => {\n    if (props.winner === 0) {\n      return \"Winner : \" + props.name.b;\n    } else if (props.winner === 1) {\n      return \"Winner : \" + props.name.w;\n    } else if (props.winner === -1) {\n      return \"Draw\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const button = () => {\n    if (props.game === 0) {\n      return <ResetContainer />;\n    } else if (props.game === 1) {\n      return <ExitContainer />;\n    } else {\n      return \"\";\n    }\n  };\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal-container\">\n        <div className=\"modal-winner\">{win()}</div>\n        <div className=\"modal-result\">\n          <div className=\"modal-item\">\n            <div className=\"user-name\">{props.name.b}</div>\n            <div className=\"count-block\">{props.count.b}</div>\n          </div>\n          <div className=\"modal-item\">\n            <div className=\"user-name\">{props.name.w}</div>\n            <div className=\"count-block\">{props.count.w}</div>\n          </div>\n        </div>\n        {button()}\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"../Components/Modal\";\n\nfunction ModalContainer(props) {\n  const name = () => {\n    if (props.game === 0) {\n      return {\n        b: \"Black\",\n        w: \"White\",\n      };\n    } else {\n      if (props.multi.user === 0) {\n        return {\n          b: props.multi.name,\n          w: props.multi.opponent,\n        };\n      } else {\n        return {\n          b: props.multi.opponent,\n          w: props.multi.name,\n        };\n      }\n    }\n  };\n\n  const checkWinner = () => {\n    if (props.count.b > props.count.w) {\n      return 0;\n    } else if (props.count.b < props.count.w) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  return props.isEnd ? (\n    <Modal\n      isEnd={props.isEnd}\n      count={props.count}\n      winner={checkWinner()}\n      name={name()}\n      game={props.game}\n    ></Modal>\n  ) : (\n    \"\"\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  isEnd: state.boardState.present.isEnd,\n  count: state.boardState.present.count,\n  game: state.gameState.game,\n  multi: state.boardState.multi,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalContainer);\n","import React from \"react\";\n\nfunction Pass(props) {\n  return (\n    <div onClick={props.onPass} className=\"pass-btn\">\n      PASS!\n    </div>\n  );\n}\n\nexport default Pass;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Pass from \"../Components/Pass\";\nimport { pass } from \"../store/modules/board\";\n\nfunction PassContainer(props) {\n  return !props.isEnd && props.canPass[props.player] ? (\n    <Pass onPass={() => props.pass(props.player)} />\n  ) : null;\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.boardState.present.player,\n  canPass: state.boardState.present.canPass,\n  isEnd: state.boardState.present.isEnd,\n});\n\nconst mapDispatchToProps = {\n  pass,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PassContainer);\n","import React from \"react\";\n\nfunction Undo(props) {\n  return (\n    <div onClick={props.onPass} className=\"pass-btn\">\n      Undo\n    </div>\n  );\n}\n\nexport default Undo;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Undo from \"../Components/Undo\";\nimport { undo } from \"../store/modules/board\";\n\nfunction UndoContainer(props) {\n  return props.history.length !== 0 ? (\n    <Undo onPass={() => props.undo()} />\n  ) : (\n    <Undo onPass={null} />\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  history: state.boardState.history,\n});\n\nconst mapDispatchToProps = {\n  undo,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UndoContainer);\n","import React from \"react\";\n\nimport PassContainer from \"../Containers/PassContainer\";\nimport UndoContainer from \"../Containers/UndoContainer\";\n\nfunction Score(props) {\n  let classBlack, classWhite;\n  if (props.player === 0) {\n    classBlack = \"profile profile--black profile--turn\";\n    classWhite = \"profile profile--white\";\n  } else if (props.player === 1) {\n    classBlack = \"profile profile--black\";\n    classWhite = \"profile profile--white profile--turn\";\n  } else {\n    classBlack = \"profile profile--black\";\n    classWhite = \"profile profile--white\";\n  }\n\n  return (\n    <div className=\"user-board\">\n      <div className={classBlack}>\n        <div className=\"user-name\">{props.name.b}</div>\n        <div className=\"count-block\">{props.count.b}</div>\n      </div>\n      <div className=\"btn-container\">\n        {props.game === 0 ? <UndoContainer /> : null}\n        <PassContainer />\n      </div>\n      <div className={classWhite}>\n        {props.name.w !== \"\"\n          ? [\n              <div key=\"user-name\" className=\"user-name\">\n                {props.name.w}\n              </div>,\n              <div key=\"count-block\" className=\"count-block\">\n                {props.count.w}\n              </div>,\n            ]\n          : \"대기\"}\n      </div>\n    </div>\n  );\n}\n\nexport default Score;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Score from \"../Components/Score\";\nimport { end } from \"../store/modules/board\";\n\nfunction ScoreContainer(props) {\n  const name = () => {\n    if (props.game === 0) {\n      return {\n        b: \"Black\",\n        w: \"White\",\n      };\n    } else {\n      if (props.multi.user === 0) {\n        return {\n          b: props.multi.name,\n          w: props.multi.opponent,\n        };\n      } else {\n        return {\n          b: props.multi.opponent,\n          w: props.multi.name,\n        };\n      }\n    }\n  };\n\n  return (\n    <Score\n      count={props.count}\n      name={name()}\n      isEnd={props.isEnd}\n      player={props.player}\n      game={props.game}\n    ></Score>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  board: state.boardState.present.board,\n  player: state.boardState.present.player,\n  isEnd: state.boardState.present.isEnd,\n  count: state.boardState.present.count,\n  game: state.gameState.game,\n  multi: state.boardState.multi,\n});\n\nconst mapDispatchToProps = {\n  end,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreContainer);\n","import React from \"react\";\n\nfunction Block(props) {\n  let state;\n  switch (props.value) {\n    case -1:\n      state = \"\";\n      break;\n    case 0:\n      state = <span className=\"dot color--black\"></span>;\n      break;\n    case 1:\n      state = <span className=\"dot color--white\"></span>;\n      break;\n    case 2:\n      if (props.turn) {\n        state = <span className=\"dot--small color--gray\"></span>;\n      } else {\n        state = \"\";\n      }\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <td onClick={props.value === 2 && props.turn ? props.OnClick : () => {}}>\n      <div className=\"dot-container\">{state}</div>\n    </td>\n  );\n}\n\nexport default Block;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Block from \"../Components/Block\";\nimport { play } from \"../store/modules/board\";\nimport socket from \"../utils/socket\";\n\nfunction BlockContainer(props) {\n  const handlePlay = () => {\n    props.play(props.row, props.col, props.turn);\n\n    // 상대측에게 클릭한 정보 보내주기\n    if (props.game === 1) {\n      socket.emit(\"play\", {\n        player: props.turn,\n        room: props.multi.room,\n        action: {\n          type: \"click\",\n          row: props.row,\n          col: props.col,\n        },\n      });\n    }\n  };\n  const isTurn = () => {\n    if (props.game === 0) {\n      return true;\n    } else if (props.game === 1) {\n      return props.multi.opponent !== \"\" && props.turn === props.multi.user\n        ? true\n        : false;\n    } else {\n      return false;\n    }\n  };\n  return (\n    <Block\n      value={props.board[props.row][props.col]}\n      OnClick={handlePlay}\n      row={props.row}\n      col={props.col}\n      turn={isTurn()}\n    />\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  game: state.gameState.game,\n  board: state.boardState.present.board,\n  turn: state.boardState.present.player,\n  multi: state.boardState.multi,\n});\n\nconst mapDispatchToProps = {\n  play,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockContainer);\n","import React from \"react\";\nimport BlockContainer from \"../Containers/BlockContainer\";\nimport { HEIGHT, WIDTH } from \"../utils/othello\";\n\nfunction Board({ board, onPlay }) {\n  const trIdx = [];\n  for (let i = 0; i < HEIGHT; i++) {\n    trIdx[i] = i;\n  }\n\n  const tdIdx = [];\n  for (let i = 0; i < WIDTH; i++) {\n    tdIdx[i] = i;\n  }\n\n  const colHeader = (\n    <tr>\n      <td></td>\n      <td>A</td>\n      <td>B</td>\n      <td>C</td>\n      <td>D</td>\n      <td>E</td>\n      <td>F</td>\n      <td>G</td>\n      <td>H</td>\n    </tr>\n  );\n\n  const trs = trIdx.map((row) => (\n    <tr key={row}>\n      <td>{row + 1}</td>\n      {tdIdx.map((col) => (\n        <BlockContainer key={col} row={row} col={col} />\n      ))}\n    </tr>\n  ));\n\n  return (\n    <>\n      <table>\n        <thead>{colHeader}</thead>\n        <tbody>{trs}</tbody>\n      </table>\n    </>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Board from \"../Components/Board\";\n\nfunction BoardContainer(props) {\n  return <Board board={props.board} />;\n}\n\nconst mapStateToProps = (state) => ({\n  board: state.boardState.present.board,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);\n","import React from \"react\";\n\nfunction History({ histories }) {\n  return (\n    <div className=\"history\">\n      <div className=\"history--title\">History</div>\n      <div id=\"abc\" className=\"history--container\">\n        {histories.map((history) =>\n          history.player === 0 ? (\n            <div className=\"history--black history--block\">\n              {history.action}\n            </div>\n          ) : (\n            <div className=\"history--white history--block\">\n              {history.action}\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default History;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport History from \"../Components/History\";\n\nfunction HistoryContainer(props) {\n  return <History histories={props.history}></History>;\n}\n\nconst mapStateToProps = (state) => ({\n  history: state.boardState.history,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport ScoreContainer from \"./ScoreContainer\";\nimport BoardContainer from \"./BoardContainer\";\nimport HistoryContainer from \"./HistoryContainer\";\nimport ExitContainer from \"./ExitContainer\";\nimport ModalContainer from \"./ModalContainer\";\nimport socket from \"../utils/socket\";\n\nfunction RoomContainer(props) {\n  let userName = \"\";\n  let roomId = \"\";\n  const changeUserName = (e) => {\n    userName = e.target.value;\n  };\n  const changeRoomId = (e) => {\n    roomId = e.target.value;\n  };\n  const createRoom = () => {\n    if (userName !== \"\") {\n      socket.emit(\"login\", {\n        name: userName,\n        type: \"create\",\n      });\n    } else {\n      console.log(\"멈춰! 이름이 없다!\");\n    }\n  };\n  const joinRoom = () => {\n    if (userName !== \"\" && roomId !== \"\") {\n      socket.emit(\"login\", {\n        name: userName,\n        room: roomId,\n        type: \"join\",\n      });\n    } else {\n      console.log(\"멈춰! 이름이나 방 코드 비어있다!\");\n    }\n  };\n\n  if (props.multi.room !== \"\") {\n    return (\n      <div>\n        <ModalContainer />\n        <div className=\"game-title\">Othello Multi</div>\n        <div className=\"room-info\">{\"Room : \" + props.multi.room}</div>\n        <div className=\"game-content\">\n          <ScoreContainer />\n          <BoardContainer />\n        </div>\n        <div>\n          <HistoryContainer />\n        </div>\n        <ExitContainer />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <label>\n          이름\n          <input type=\"text\" onChange={changeUserName}></input>\n        </label>\n        <label>\n          방 코드\n          <input type=\"text\" onChange={changeRoomId}></input>\n        </label>\n        <div className=\"btn-container\">\n          <div className=\"room-btn\" onClick={createRoom}>\n            Create Room\n          </div>\n          <div className=\"room-btn\" onClick={joinRoom}>\n            Join Room\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  player: state.boardState.present.player,\n  multi: state.boardState.multi,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoomContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport ModalContainer from \"./ModalContainer\";\nimport ScoreContainer from \"./ScoreContainer\";\nimport BoardContainer from \"./BoardContainer\";\nimport HistoryContainer from \"./HistoryContainer\";\nimport RoomContainer from \"./RoomContainer\";\nimport { select } from \"../store/modules/game\";\n\nfunction GameContainer(props) {\n  let result;\n  switch (props.game) {\n    case -1:\n      result = (\n        <div>\n          <div onClick={() => props.select(0)}>Local</div>\n          <div onClick={() => props.select(1)}>Multi</div>\n        </div>\n      );\n      break;\n    case 0:\n      result = (\n        <div>\n          <ModalContainer />\n          <div className=\"game-title\">Othello Local</div>\n          <div className=\"game-content\">\n            <ScoreContainer />\n            <BoardContainer />\n          </div>\n          <div>\n            <HistoryContainer />\n          </div>\n        </div>\n      );\n      break;\n    case 1:\n      result = <RoomContainer />;\n      break;\n    default:\n      break;\n  }\n\n  return <div>{result}</div>;\n}\nconst mapStateToProps = (state) => ({\n  game: state.gameState.game,\n});\n\nconst mapDispatchToProps = {\n  select,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameContainer);\n","import React from \"react\";\nimport \"./main.scss\";\nimport GameContainer from \"./Containers/GameContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}